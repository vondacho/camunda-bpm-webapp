{
  "name": "angular-data-depend",
  "author": {
    "name": "Nico Rehwaldt",
    "email": "https://github.com/Nikku"
  },
  "description": "A toolkit for implementing complex, data heavy AngularJS applications",
  "version": "1.0.0",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Nikku/angular-data-depend.git"
  },
  "main": "src/dataDepend.js",
  "keywords": [
    "angularjs",
    "data",
    "async"
  ],
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-contrib-watch": "~0.5.1",
    "grunt-karma": "~0.5.0",
    "karma": "~0.9",
    "karma-script-launcher": "~0.0",
    "karma-chrome-launcher": "~0.0",
    "karma-firefox-launcher": "~0.0",
    "karma-jasmine": "~0.0",
    "karma-phantomjs-launcher": "~0.0",
    "karma-junit-reporter": "~0.0.2"
  },
  "license": "MIT",
  "gitHead": "8e3b66914c611069e3698fd5d4275e6cf8055d01",
  "readme": "# angular-data-depend\n\n[![Build Status](https://travis-ci.org/Nikku/angular-data-depend.png?branch=master)](https://travis-ci.org/Nikku/angular-data-depend)\n\nA toolkit for implementing complex, data heavy [AngularJS](http://angularjs.org/) applications.\n\n\n## Features\n\n__dataDepend__ allows you handle complex data dependencies via _data providers_ and _data observers_. \n\n*   It allows you to make data dependencies in explicit\n*   It takes care of resolving only the required data in the correct order\n*   It updates dependent data upon changes\n*   It gives you feedback on the load state of the data\n\n\n## Overview\n\nUse __dataDepend__ to structure your application into _providers_ and _observers_ and let the library do all the rest.\n\n```javascript\nfunction MyController($scope, Article, Comment, Authentication, dataDepend) {\n\n  var $data = dataDepend.create($scope);\n\n  // providers ///////////\n\n  $data.provide('articleId', 22);\n  $data.provide('currentUser', Authentication.currentUser());\n\n  $data.provide('article', ['articleId', function(id) {\n    return Article.get({ id: id }).$promise;\n  }]);\n\n  $data.provide('recommendations', ['article', 'currentUser', function(article, comments, currentUser) {\n    return Article.queryRecommended({ article: article, user: currentUser }).$promise;\n  }]);\n\n  // consumers ///////////\n\n  function updateView(article, recommendations) {\n    // update current scope\n  }\n\n  // $scope.view keeps track of current loading state \n  // and provides access to loaded variable\n  $scope.view = $data.observe(['article', 'recommendations', updateView]);\n}\n```\n\n\n## Resources\n\n-   [Website](http://nikku.github.io/angular-data-depend/)\n-   [Issue tracker](https://github.com/Nikku/angular-data-depend/issues)\n\n\n## Usage\n\nCreate a new data container:\n\n```javascript\nvar $data = dataDepend.create($scope);\n```\n\n#### Providers\n\nProviders compute, fetch or statically supply the application with a named data items. \nRegister a data provider via `#provide(name, definition | value)`. The simples provider is the static one, producing a primitive or object value:\n\n```javascript\n$data.provide('articleId', 22);\n```\n\nThe values produced by static providers may be updated via `$data.set(name, value)`;\n\nA dynamic provider is a function that returns either the value or a [promise](http://docs.angularjs.org/api/ng.$q#description_the-promise-api):\n\n```\n$data.provide('articleFromBackend', function() {\n  return $http.get('/the-one-and-only-article').then(function(response) {\n    return response.data\n  });  \n});\n```\n\nDynamic providers may declare dependencies on other data items (in a [$injector](http://docs.angularjs.org/api/AUTO.$injector) compatible format):\n\n```javascript\n$data.provide('article', ['articleId', function(id) {\n  return $http.get('/articles/' + id).then(function(response) {\n    return response.data\n  });\n}]);\n```\n\n#### Observers\n\nObservers get notified whenever a set of data items change.\nThey track the load status of these items, trigger their evaluation and should be used as the end points to bind data items to the view scope.\n\nRegister an observer via `#observe(definition)`:\n\n```javascript\nvar handle = $data.observe(['article', 'articleDetails', function(article, articleDetails) {\n  $scope.article = article;\n  $scope.articleDetails = articleDetails;  \n}]);\n```\n\nRegistering an observer via `#observe()` returns a handle to the created observer. The handle can be used to query the status of the observed data:\n\n```javascript\nhandle.$loaded; // false if any of the required data elements are currently loading\nhandle.$error;  // error if any occured during loading the observed dependencies\n```\n\n#### Notes\n\nTo re-use a data container in a child scope, a child instance bound to the specific scope should be created: \n\n```javascript\nvar $childData = $data.newChild(childScope);\n```\n\nThis ensures that all observer and producer bindings registered in the child scope are properly cleaned up.\n\n\n## Building the Project\n\n1.   Fork + clone [the repository](https://github.com/Nikku/angular-data-depend).\n2.   Install dependencies via `npm install`.\n3.   Build the library via `grunt`.\n\n\n## License\n\nUse under terms of MIT license.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Nikku/angular-data-depend/issues"
  },
  "homepage": "https://github.com/Nikku/angular-data-depend#readme",
  "_id": "angular-data-depend@1.0.0",
  "_shasum": "d00b13ca8fff7ff3020fcdb60239b3bc81c13101",
  "_from": "git://github.com/camunda-third-party/angular-data-depend.git#8e3b66914c611069e3698fd5d4275e6cf8055d01",
  "_resolved": "git://github.com/camunda-third-party/angular-data-depend.git#8e3b66914c611069e3698fd5d4275e6cf8055d01"
}
